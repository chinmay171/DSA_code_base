------------------------------------------------------------recursive-----------------------------------------------------------------


import java.io.*;
import java.util.*;
public class Main {
    public static int rec(int n){
        if(n == 0){
            return 1;
        }
        int single = 0; 
        int pair = 0;
        if(n >= 2){
            pair = (n-1)*rec(n-2);
        }
        single = 1 * rec(n-1);
        return single + pair;
    }
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int ans = rec(n);
        System.out.println(ans);
    }
}


-----------------------------------------------------------Memorization----------------------------------------------------------------


import java.io.*;
import java.util.*;
public class Main {
    public static int rec(int n, int[] dp){
        if(n == 0){
            return dp[n] = 1;
        }
        if(dp[n] != 0){
            return dp[n];
        }
        int single = 0; 
        int pair = 0;
        if(n >= 2){
            pair = (n-1)*rec(n-2, dp);
        }
        single = 1 * rec(n-1, dp);
        return dp[n] = single + pair;
    }
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] dp = new int[n+1];
        int ans = rec(n, dp);
        System.out.println(ans);
    }
}


----------------------------------------------------------------Tabulation--------------------------------------------------------------


import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] dp = new int[n+1];
        for(int i = 0; i <= n; ++i){
            if(i == 0){
                dp[i] = 1;
                continue;
            }
            int single = 0; 
            int pair = 0;
            if(i >= 2){
                pair = (i-1)*dp[i-2];
            }
            single = 1 * dp[i-1];
            dp[i] = single + pair;
        }
        System.out.println(dp[n]);
    }
}