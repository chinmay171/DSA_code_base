----------------------------------------------------------recursive------------------------------------------------------------------------


import java.io.*;
import java.util.*;
public class Main {
    public static int rec(int idx, int flag, int[] arr,int count){
        if(count == 0){
            return 0;
        }
        if(idx == arr.length){
            return 0;
        }
        if(flag == 0){
            int whenBuyingFromHere = -arr[idx] + rec(idx+1, 1, arr,count);
            int whenNotBuyingFromHere = rec(idx+1, 0, arr,count);
            return Math.max(whenBuyingFromHere, whenNotBuyingFromHere);
        }
        else{
            int whenSellingFromHere = arr[idx] + rec(idx+1, 0, arr,count-1);
            int whenNotSellingHere = rec(idx+1, 1, arr,count);
            return Math.max(whenSellingFromHere, whenNotSellingHere);
        }
    }
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i = 0; i<n; ++i){
            arr[i] = sc.nextInt();
        }
        int ans = rec(0, 0, arr, 2);
        System.out.println(ans);
    }
}


--------------------------------------------------------------Memorization--------------------------------------------------------------


import java.io.*;
import java.util.*;
public class Main {
    public static int rec(int idx, int flag, int[] arr,int count,int[][][] dp){
        if(count == 0){
            return 0;
        }
        if(idx == arr.length){
            return 0;
        }
        if(dp[idx][flag][count] != 0){
            return dp[idx][flag][count];
        }
        if(flag == 0){
            int whenBuyingFromHere = -arr[idx] + rec(idx+1, 1, arr,count, dp);
            int whenNotBuyingFromHere = rec(idx+1, 0, arr,count, dp);
            return dp[idx][flag][count] = Math.max(whenBuyingFromHere, whenNotBuyingFromHere);
        }
        else{
            int whenSellingFromHere = arr[idx] + rec(idx+1, 0, arr,count-1, dp);
            int whenNotSellingHere = rec(idx+1, 1, arr,count, dp);
            return dp[idx][flag][count] = Math.max(whenSellingFromHere, whenNotSellingHere);
        }
    }
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i = 0; i<n; ++i){
            arr[i] = sc.nextInt();
        }
        int[][][] dp = new int[n+1][2][3];
        int ans = rec(0, 0, arr, 2,dp);
        System.out.println(ans);
    }
}


---------------------------------------------------------------Tabulation------------------------------------------------------------------


import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i = 0; i<n; ++i){
            arr[i] = sc.nextInt();
        }
        int[][][] dp = new int[n+1][2][3];
        for(int idx = n; idx>= 0; --idx){
            for(int flag = 0; flag<2; ++flag){
                for(int count = 0; count <3; ++count){
                    if(count == 0){
                        dp[idx][flag][count] = 0;
                        continue;
                    }
                    if(idx == arr.length){
                        dp[idx][flag][count] = 0;
                        continue;
                    }
                    if(flag == 0){
                        int whenBuyingFromHere = -arr[idx] + dp[idx+1][1][count];
                        int whenNotBuyingFromHere = dp[idx+1][0][count];
                        dp[idx][flag][count] = Math.max(whenBuyingFromHere, whenNotBuyingFromHere);
                    }
                    else{
                        int whenSellingFromHere = arr[idx] + dp[idx+1][0][count-1];
                        int whenNotSellingHere = dp[idx+1][1][count];
                        dp[idx][flag][count] = Math.max(whenSellingFromHere, whenNotSellingHere);
                    }
                }
            }
        }
        System.out.println(dp[0][0][2]);
    }
}
