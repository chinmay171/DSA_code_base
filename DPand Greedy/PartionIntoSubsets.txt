--------------------------------------------------------recursive---------------------------------------------------------------------------

import java.io.*;
import java.util.*;
public class Main {
    public static long partitionKSubset(int n, int k) {
        if(n == 0 || k == 0 || k>n){
            return 0;
        }
        if(n == k || k == 1){
            return 1;
        }
        long call1 = k*partitionKSubset(n-1, k);
        long call2 = partitionKSubset(n-1, k-1);
        return call1+call2;
    }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        long res = partitionKSubset(n, k);
        System.out.println(res);
    }
}


--------------------------------------------------------Memorization---------------------------------------------------------------------


import java.io.*;
import java.util.*;
public class Main {
    public static long partitionKSubset(int n, int k, long[][] dp) {
        if(n == 0 || k == 0 ){
            return dp[n][k] = 0;
        }
        if(k == n || k == 1){
            return dp[n][k] = 1;
        }
        if(dp[n][k] != 0){
            return dp[n][k];
        }
        long call1 = k*partitionKSubset(n-1, k, dp);
        long call2 = partitionKSubset(n-1, k-1, dp);
        return dp[n][k] = call1+call2;
    }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        long[][] dp = new long[n+1][k+1];
        long res = partitionKSubset(n, k, dp);
        System.out.println(res);
    }
}


--------------------------------------------------------------Tabulation---------------------------------------------------------------------


import java.io.*;
import java.util.*;
public class Main {
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n1 = scn.nextInt();
        int k1 = scn.nextInt();
        long[][] dp = new long[n1+1][k1+1];
        for(int n = 0; n <= n1; ++n){
            for(int k = 0; k <= k1; ++k){
                if(n == 0 || k == 0 || k>n){
                    dp[n][k] = 0;
                    continue;
                }
                if(k == n || k == 1){
                    dp[n][k] = 1;
                    continue;
                }
                long call1 = k*dp[n-1][k];
                long call2 = dp[n-1][k-1];
                dp[n][k] = call1+call2;
            }
        }
        System.out.println(dp[n1][k1]);
    }
}