--------------------------------------------------------Recursive-------------------------------------------------------------------------

import java.io.*;
import java.util.*;
public class Main {
    public static long partitionKSubset(int n, int k) {
        // write your code here
        if(n == 0 || k == 0 || k > n){
            return 0;
        }
        if(k == n || k == 1){
            return 1;
        }
        long call1 = k*partitionKSubset(n-1, k);
        long call2 = partitionKSubset(n-1, k-1);
        return call1+call2;
    }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        long res = partitionKSubset(n, k);
        System.out.println(res);
    }
}

----------------------------------------------------------Memorization-------------------------------------------------------------------

import java.io.*;
import java.util.*;
public class Main {
    public static long partitionKSubset(int n, int k, long[][] dp) {
        // write your code here
        if(n == 0 || k == 0 || k > n){
            return dp[n][k] = 0;
        }
        if(k == n || k == 1){
            return dp[n][k] = 1;
        }
        if(dp[n][k] != 0){
            return dp[n][k];
        }
        long call1 = k*partitionKSubset(n-1, k, dp);
        long call2 = partitionKSubset(n-1, k-1, dp);
        return dp[n][k] = call1+call2;
    }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        long[][] dp = new long[n+1][k+1];
        long res = partitionKSubset(n, k, dp);
        System.out.println(res);
    }
}

----------------------------------------------------------------Tabulation--------------------------------------------------------------


